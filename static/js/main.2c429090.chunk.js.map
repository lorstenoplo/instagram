{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","name","postId","user","Postusername","imageUrl","caption","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","React","open","setOpen","handleClose","event","reason","className","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","action","Fragment","IconButton","size","aria-label","color","onClick","fontSize","Avatar","alt","style","textTransform","src","displayName","Button","delete","variant","disableElevation","username","text","type","placeholder","value","onChange","e","target","disabled","preventDefault","add","timestamp","FieldValue","serverTimestamp","ImageUpload","uploadname","setCaption","image","setImage","progress","setProgress","id","max","Input","files","ref","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","openSignIn","setOpenSignIn","setUsername","email","setEmail","password","setPassword","setUser","setName","hid","setHid","onAuthStateChanged","authUser","post","Modal","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","LinearProgress","key","textAlign","marginTop","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c429090.chunk.js","sourcesContent":[" import firebase from 'firebase'\r\n\r\n  const firebaseApp = firebase.initializeApp(\r\n      {\r\n        apiKey: \"AIzaSyC87gs_k0UQnwpu8IGCudrgMfN4PmIJq5o\",\r\n        authDomain: \"instagram-clone-nishanth.firebaseapp.com\",\r\n        databaseURL: \"https://instagram-clone-nishanth.firebaseio.com\",\r\n        projectId: \"instagram-clone-nishanth\",\r\n        storageBucket: \"instagram-clone-nishanth.appspot.com\",\r\n        messagingSenderId: \"739762093701\",\r\n        appId: \"1:739762093701:web:577183306f7739afa733ec\",\r\n        measurementId: \"G-HMK9DWJSE4\"\r\n      }\r\n  )\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport {db,auth,storage}","import React, { useState, useEffect } from 'react'\r\nimport './Post.css'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport {Button} from '@material-ui/core'\r\nimport { db } from './firebase';\r\nimport firebase from 'firebase'\r\n\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n \r\n\r\nfunction Post({name,postId,user,Postusername,imageUrl,caption}) {\r\n    const [comments, setComments] = useState([]);\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        let unsubscribe;\r\n        if (postId){\r\n            unsubscribe = db\r\n                            .collection(\"posts\")\r\n                            .doc(postId)\r\n                            .collection('comments')\r\n                            .orderBy('timestamp','desc')\r\n                            .onSnapshot(snapshot=>{\r\n                                setComments(snapshot.docs.map((doc)=> doc.data()));\r\n                            })\r\n        }\r\n\r\n        return ()=>{\r\n            unsubscribe();\r\n        }\r\n    }, [postId])\r\n\r\n    const postComment=(event)=>{\r\n            event.preventDefault();\r\n            db.collection('posts').doc(postId).collection('comments').add({\r\n                text:comment,\r\n                username: user.displayName,\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            });\r\n            setComment('')\r\n    }\r\n    //----------\r\n\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n  \r\n    const handleClick = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n  \r\n      setOpen(false);\r\n    };\r\n    //--------------\r\n\r\n    return (\r\n        <div className='post'>\r\n\r\n        {/*  */}\r\n        {/* <Button onClick={handleClick}>Open simple snackbar</Button> */}\r\n    <Snackbar\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left',\r\n      }}\r\n      open={open}\r\n      autoHideDuration={2000}\r\n      onClose={handleClose}\r\n      message=\"Note archived\"\r\n      action={\r\n        <React.Fragment>\r\n      \r\n          <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n            <CloseIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </React.Fragment>\r\n      }\r\n    />\r\n        {/*  */}\r\n\r\n     \r\n            <div className='post_header'>\r\n            <div className='post_header_1'>\r\n            <Avatar \r\n                className='post_avatar'\r\n                alt={Postusername}\r\n                style={{textTransform:'capitalize'}}\r\n                src='/imgages'\r\n            />\r\n            <h3 style={{textTransform:'capitalize'}}>{Postusername}</h3>\r\n            </div>\r\n                    {(user && Postusername==user.displayName)?(<Button \r\n                    onClick={\r\n                      (event)=>{ db.collection('posts').doc(postId).delete()}\r\n                    }\r\n                    variant=\"contained\" color=\"secondary\" disableElevation>\r\n                       Delete\r\n                     </Button>):(\r\n                         <p></p>\r\n                     )}\r\n                   \r\n            </div>\r\n            <img \r\n                className='post_img'\r\n                src= {imageUrl}\r\n                alt='posted'\r\n            />\r\n            <h4 className='post_text'><strong>{Postusername}</strong> {caption}</h4>\r\n\r\n            <div className='post_comments'>\r\n                {\r\n                    comments.map((comment)=>(\r\n                        <p>\r\n                            <strong>{comment.username}</strong> {comment.text}\r\n                        </p>  \r\n                    ))\r\n                }\r\n            </div>\r\n\r\n                {user &&(\r\n                    <form className='post_commentBox'>\r\n                <input\r\n                className='post_input'\r\n                type='text'\r\n                placeholder='Add a Comment...'\r\n                value={comment}\r\n                onChange={(e)=> setComment(e.target.value)}\r\n                 />\r\n                 <button\r\n                 type='submit'\r\n                 disabled={!comment}\r\n                 onClick={postComment}\r\n                 className='post_button'   \r\n                  > \r\n                  Post\r\n                  </button>\r\n            </form>\r\n                )\r\n                }\r\n\r\n                <div>\r\n     \r\n    </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React, { useState } from 'react'\r\nimport { Input, Button } from '@material-ui/core'\r\nimport { storage, db } from './firebase'\r\nimport firebase from 'firebase'\r\nimport './ImageUpload.css'\r\n\r\nfunction ImageUpload({uploadname}) {\r\n    const [caption, setCaption] = useState('')\r\n    const [image, setImage] = useState(null)\r\n    const [progress, setProgress] = useState(0)\r\n\r\n\r\n    const handleChange=(e)=>{\r\n        if(e.target.files[0]){\r\n            setImage(e.target.files[0])\r\n        }\r\n    } \r\n\r\n    const handleUpload=()=>{\r\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n\r\n        uploadTask.on(\r\n            'state_changed',\r\n            (snapshot)=>{\r\n                const progress = Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) *100\r\n                );\r\n                setProgress(progress)\r\n            },\r\n            (error)=>{\r\n                console.log(error);\r\n                alert(error.message);\r\n            },\r\n            ()=>{\r\n                storage\r\n                    .ref('images')\r\n                    .child(image.name)\r\n                    .getDownloadURL()\r\n                    .then(url =>{\r\n                        db.collection('posts').add({\r\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                            caption: caption,\r\n                            imageUrl: url,\r\n                            username: uploadname\r\n                        });\r\n                        setImage(null);\r\n                        setProgress(0);\r\n                        setCaption(\"\");\r\n                    })\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div id='cont'>\r\n        <div className='imageupload'>\r\n        <h1>Post Your Story</h1>\r\n            <progress className='imageupload_progress' value={progress} max='100' />\r\n            <Input \r\n            type='text'\r\n            placeholder='Enter a Caption...' \r\n            value={caption}\r\n            onChange= {event => setCaption(event.target.value)}    \r\n            />\r\n            <input type='file' onChange={handleChange} />\r\n            <Button onClick={handleUpload}>\r\n                Upload\r\n            </Button> \r\n            <div className='img_brand'><p>Built by- Nishanth.M.Dipali</p></div>\r\n            \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageUpload\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Post from './Post';\nimport { db, auth } from './firebase';\nimport Modal from '@material-ui/core/Modal'\nimport {makeStyles} from '@material-ui/core/styles'\nimport { Button, Input, Avatar } from '@material-ui/core';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport ImageUpload from './ImageUpload';\n\n\nfunction getModalStyle() {\n  const top = 50 ;\n  const left = 50 ;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n\n\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n  const [name, setName] = useState(null)\n  const [dis,setDis] = useState('0');\n  const [hid, setHid] = useState('')\n\n  useEffect(()=>{\n    const unsubscribe= auth.onAuthStateChanged((authUser) =>{\n      if(authUser){\n          setUser(authUser)\n      }else{\n          setUser(null)\n      }\n    })\n\n    return () =>{\n      unsubscribe();\n    }\n  },[username, user, name]);\n\nuseEffect(() => {\n  db.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot=>{\n    setPosts(snapshot.docs.map(doc=> ({\n       id:doc.id,\n       post:doc.data() })))\n  })\n}, [])\n\n  const signUp=(event)=>{\n      event.preventDefault();\n      auth.createUserWithEmailAndPassword(email, password)\n          .then((authUser)=>{\n            return authUser.user.updateProfile({\n              displayName:username,\n              user: authUser\n            })\n          })\n          .catch((error) => {\n            alert(error.message);\n              setOpen(true);\n              setHid('')  \n          })\n     setName(username);\n     setUsername(username);   \n     setOpen(false);\n     setHid('hidder')\n    \n  }\n\n  const signIn =(event)=>{\n    event.preventDefault();\n\n    auth.signInWithEmailAndPassword(email, password)\n        .catch((error) =>{\n          alert(error.message);\n            setOpenSignIn(true)\n            setHid('')  \n        })\n        setOpenSignIn(false);\n        setHid('hidder')\n  }\n  return (\n    <div className=\"App\">\n    <Modal\n      open={open}\n      onClose={()=> setOpen(false)}\n    >\n    <div style={modalStyle} className={classes.paper}>\n     <center>\n    \n    <img \n      src='https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png'\n      alt='Instagram'\n    />\n    </center>\n     <form className='app_signUp'>\n    <Input \n      type='text'\n      value={username}\n      onChange={(e) => setUsername(e.target.value)}\n       placeholder=\"Username\" />\n      <Input \n      type='text'\n      value={email}\n      onChange={(e) => setEmail(e.target.value)}\n       placeholder=\"Email\" />\n      <Input \n      type='password'\n      value={password}\n      onChange={(e) => setPassword(e.target.value)}\n      placeholder=\"Password\" />\n     \n     <Button type='submit' onClick={signUp}>Sign Up</Button>\n     </form>\n      </div>\n    </Modal>\n\n\n    <Modal\n      open={openSignIn}\n      onClose={()=> setOpenSignIn(false)}\n    >\n    <div style={modalStyle} className={classes.paper}>\n     <center>\n    \n    <img \n      src='https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png'\n      alt='Instagram'\n    />\n    </center>\n     <form className='app_signUp'>\n      <Input \n      type='text'\n      value={email}\n      onChange={(e) => setEmail(e.target.value)}\n       placeholder=\"Email\" />\n      <Input \n      type='password'\n      value={password}\n      onChange={(e) => setPassword(e.target.value)}\n      placeholder=\"Password\" />\n     \n     <Button type='submit' onClick={signIn}>Sign In</Button>\n     </form>\n      </div>\n    </Modal>\n\n   \n    <div id='app_header'>\n  \n    <img \n      className='header_image'\n      src='https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png'\n      alt='Instagram'\n    />\n \n   \n\n{\n \n      user? (\n        <div className='app_right'>\n        <Button variant='outlined' onClick={() => auth.signOut()}>{user?.displayName?(user.displayName):(name)} ˅ </Button>\n        <Avatar \n                className='post_avatar'\n                alt={user?.displayName?(user.displayName):(name)}\n                style={{textTransform:'capitalize'}}\n                src='/imgages'\n            />\n            </div>\n      ) : (\n        <div className='app_loginContainer'> \n        <Button onClick={() => {setOpen(true);setHid('')}}>Sign Up</Button>\n        <Button onClick={() => {setOpenSignIn(true);setHid('')}}>Sign In</Button>\n        </div>\n      )\n    }\n\n    </div>\n    <LinearProgress className= {hid} />\n \n \n    <div className='app_posts'>\n\n    {\n      user?(\n        <ImageUpload uploadname={name?(name):(user.displayName)} />\n      ):(\n        <p></p>\n      )\n    }\n    \n    {\n      posts.map(({post,id})=>(\n        <Post key={id} postId={id} name={name} user={user} Postusername={post.username} imageUrl={post.imageUrl} caption={post.caption} />\n      ))\n    }\n    </div>\n   \n\n\n    {\n      user? (\n        <h3 style={{textAlign:'center', marginTop:'10px', border:'1px solid lightgray', padding:'10px'}}>Wanna post your story tooo... <a href='#cont'><Button variant='outlined'>Post</Button></a>\n        </h3>\n      ):(\n          <h3 style={{textAlign:'center', marginTop:'10px', border:'1px solid lightgray', padding:'10px'}}>Sorry you Need to Login to Upload</h3>\n      )\n    }\n    </div>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}